//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Data/Input Actions/PlayerPause.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerPause: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerPause()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerPause"",
    ""maps"": [
        {
            ""name"": ""PauseInAc"",
            ""id"": ""7ee63945-ee5b-463e-b1d1-4c7cc422bdfd"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""66063d2d-5ab6-452c-81ac-c6c3a84624f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bd3afdeb-6448-424d-8ca9-ffbcbea59780"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9fb2c336-f57e-4720-ab94-df8711511d52"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard & Mouse"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""382b2de4-909d-4cba-9f61-5806958db652"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PauseInAc
        m_PauseInAc = asset.FindActionMap("PauseInAc", throwIfNotFound: true);
        m_PauseInAc_Pause = m_PauseInAc.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PauseInAc
    private readonly InputActionMap m_PauseInAc;
    private List<IPauseInAcActions> m_PauseInAcActionsCallbackInterfaces = new List<IPauseInAcActions>();
    private readonly InputAction m_PauseInAc_Pause;
    public struct PauseInAcActions
    {
        private @PlayerPause m_Wrapper;
        public PauseInAcActions(@PlayerPause wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pause => m_Wrapper.m_PauseInAc_Pause;
        public InputActionMap Get() { return m_Wrapper.m_PauseInAc; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseInAcActions set) { return set.Get(); }
        public void AddCallbacks(IPauseInAcActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseInAcActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseInAcActionsCallbackInterfaces.Add(instance);
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPauseInAcActions instance)
        {
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPauseInAcActions instance)
        {
            if (m_Wrapper.m_PauseInAcActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseInAcActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseInAcActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseInAcActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseInAcActions @PauseInAc => new PauseInAcActions(this);
    public interface IPauseInAcActions
    {
        void OnPause(InputAction.CallbackContext context);
    }
}
